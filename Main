// ***********************************************
// Program Abstract
// This program uses recursion to draw squares that only draws to the 
// three empty corners of the square.
// ***********************************************

// ***********************************************
// Program Variable Dictionary
// xSize is the value of the width of the sqaure
// ySize is the height of the height of the square
// x is the x coord of the square
// y is the y coord of the square
// ***********************************************
import java.awt.*;
import java.awt.event.*;
public class ch_32_B
{
	public static void main(String args[])
	{
		GfxApp gfx = new GfxApp();
		gfx.setSize(1680,1050);
		gfx.addWindowListener(new WindowAdapter() {public void
		windowClosing(WindowEvent e) {System.exit(0);}});
		gfx.show();
	}
}
class GfxApp extends Frame
{
	public void paint (Graphics g)
	{
		drawSquare1(g,1680,1050);
	}
	public void drawSquare1(Graphics g, int maxX, int maxY)
	{
     int xWidth = maxX/4;
     int yHeight = maxY/4;
     g.fillRect((maxX/2)-xWidth/2,(maxY/2)-yHeight/2,xWidth,yHeight);
     delay(500000);
     RectanglesTL(g,(maxX/2)-xWidth,(maxY/2)-yHeight,xWidth/2,yHeight/2);
  // top left
     RectanglesTR(g,(maxX/2)+xWidth/2,(maxY/2)-yHeight,xWidth/2,yHeight/2);
  // top right
     RectanglesBR(g,(maxX/2)+xWidth/2,(maxY/2)+yHeight/2,xWidth/2,yHeight/2);
  // bottom right 
     RectanglesBL(g,(maxX/2)-xWidth,(maxY/2)+yHeight/2,xWidth/2,yHeight/2);
  // bottom left
	}
	public void RectanglesTL(Graphics g, int x, int y,int xSize,int ySize)
   {  
      g.fillRect(x,y,xSize,ySize);
      if (xSize>=1 && ySize>=1 )
      {
         RectanglesTL(g,x-xSize/2,y-ySize/2,xSize/2,ySize/2);
         //T L
         delay(2);
         RectanglesTR(g,x+xSize,y-ySize/2,xSize/2,ySize/2);
         //T R
         delay(2);
         RectanglesBL(g,x-xSize/2,y+ySize,xSize/2,ySize/2);   
         //B L
         delay(2);
      }
   }
   public void RectanglesTR(Graphics g, int x, int y,int xSize,int ySize)
   {  
      g.fillRect(x,y,xSize,ySize);
      if (xSize>=1 && ySize>=1 )
      {
         RectanglesTL(g,x-xSize/2,y-ySize/2,xSize/2,ySize/2);
         //T L
         delay(2);
         RectanglesTR(g,x+xSize,y-ySize/2,xSize/2,ySize/2);
         //T R
         delay(2);
         RectanglesBR(g,x+xSize,y+ySize,xSize/2,ySize/2);
         //B R
         delay(2);
      }
   }
   public void RectanglesBR(Graphics g, int x, int y,int xSize,int ySize)
   {  
      g.fillRect(x,y,xSize,ySize);
      if (xSize>=1 && ySize>=1 )
      {
         RectanglesTR(g,x+xSize,y-ySize/2,xSize/2,ySize/2);
         //T R
         delay(2);
         RectanglesBR(g,x+xSize,y+ySize,xSize/2,ySize/2);
         //B R
         delay(2);
         RectanglesBL(g,x-xSize/2,y+ySize,xSize/2,ySize/2);   
         //B L
         delay(2);
      }
   }
   public void RectanglesBL(Graphics g, int x, int y,int xSize,int ySize)
   {  
      g.fillRect(x,y,xSize,ySize);
      if (xSize>=1 && ySize>=1 )
      {
         RectanglesTL(g,x-xSize/2,y-ySize/2,xSize/2,ySize/2);
         //T L
         delay(2);
         RectanglesBR(g,x+xSize,y+ySize,xSize/2,ySize/2);
         //B R
         delay(2);
         RectanglesBL(g,x-xSize/2,y+ySize,xSize/2,ySize/2);   
         //B L
         delay(2);
      }
   }
	private void delay(double n)
	{
		for (double k = 1; k < n; k+=0.001);
	}		
}
